{
	"name": "PL-Framework-FromOnPrem-ToAzure",
	"properties": {
		"activities": [
			{
				"name": "SP-InitiateLog",
				"description": "Initiate the start of the Pipeline.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[UTIL].[spPipelineExecutionInitiate]",
					"storedProcedureParameters": {
						"DataFactoryName": {
							"value": {
								"value": "@pipeline().DataFactory",
								"type": "Expression"
							},
							"type": "String"
						},
						"PipelineName": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"RunID": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"Message": {
							"value": {
								"value": "@concat(pipeline().parameters.SourceSchema, '.', pipeline().parameters.SourceTable)",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LinkedServiceTargetDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LU-Metadata",
				"description": "Get the metadata for the current object from the SQL Table UTIL.DataLoadMetadata. The metadata should have all information required to load the object.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SP-InitiateLog",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlSource",
						"sqlReaderQuery": {
							"value": "SELECT * FROM UTIL.[vDataLoadMetaData_FromTable_ToTable] WHERE SourceSystem = '@{pipeline().parameters.SourceSystem}' AND SourceSchema = '@{pipeline().parameters.SourceSchema}' AND SourceTable = '@{pipeline().parameters.SourceTable}'",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "DSDataLoadMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "SP-FinishLog",
				"description": "Initiate the end of the Pipeline",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "IF-LastExtractionUpdate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "UTIL.spPipelineExecutionFinish",
					"storedProcedureParameters": {
						"RunID": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LinkedServiceTargetDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "IF-CopyData",
				"description": "Copy data from Source to Sink if the Extraction Flag is true",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "IF-SourceSQL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@{activity('LU-Metadata').output.firstRow.ExtractionFlag}",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "COPY-SourceToStage",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlSource",
									"sqlReaderQuery": {
										"value": "@variables('SourceSQL')",
										"type": "Expression"
									}
								},
								"sink": {
									"type": "SqlSink",
									"writeBatchSize": 10000,
									"preCopyScript": {
										"value": "TRUNCATE TABLE @{activity('LU-Metadata').output.firstRow.TargetObject}",
										"type": "Expression"
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "LinkedServiceAzureBlobStorage",
										"type": "LinkedServiceReference"
									},
									"path": "stage"
								},
								"dataIntegrationUnits": 0
							},
							"inputs": [
								{
									"referenceName": "DSDBSourceOnPremGeneral",
									"type": "DatasetReference",
									"parameters": {
										"DBName": {
											"value": "@activity('LU-Metadata').output.firstRow.SourceDatabase",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DSDBSinkGeneral",
									"type": "DatasetReference",
									"parameters": {
										"SinkTableName": {
											"value": "@{activity('LU-Metadata').output.firstRow.TargetObject}",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "IF-SPTransformData",
				"description": "Check if the Extraction Flag is true and a Stored Procedure name is specified for transformation post data load ",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "IF-CopyData",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@{and(not(equals(activity('LU-Metadata').output.firstRow.TransformationSP, '')), activity('LU-Metadata').output.firstRow.ExtractionFlag)}",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "SP-Transform",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": {
									"value": "@{activity('LU-Metadata').output.firstRow.TransformationSP}",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "LinkedServiceTargetDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "IF-LastExtractionUpdate",
				"description": "Update the metadata with LastExtraction Value",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "IF-SPTransformData",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@{activity('LU-Metadata').output.firstRow.ExtractionFlag}",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "SP-UpdateLastExtraction",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[UTIL].[spUpdateLastExtraction]",
								"storedProcedureParameters": {
									"LastExtractionCounter": {
										"value": {
											"value": "@variables('LastExtractionCounter')",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"LastExtractionTime": {
										"value": {
											"value": "@variables('LastExtractionTime')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"RecordID": {
										"value": {
											"value": "@{activity('LU-Metadata').output.firstRow.RecordID}",
											"type": "Expression"
										},
										"type": "Guid"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LinkedServiceTargetDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "IF-SourceSQL",
				"description": "Update the Source SQL in the variable. If Incremental Load then update the Last Extraction Value in the SQL",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "IF-IncrementalLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@{and(activity('LU-Metadata').output.firstRow.IncrementalLoadFlag, activity('LU-Metadata').output.firstRow.ExtractionFlag)}",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SET-SourceSQL-Full",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "SourceSQL",
								"value": {
									"value": "@activity('LU-Metadata').output.firstRow.SourceSQL",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SET-LastExtractionVal",
							"description": "Set the Incremental Load Value to be used in Source SQL later",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "IncrementalLoadValue",
								"value": {
									"value": "@{if(equals(activity('LU-Metadata').output.firstRow.IncrementalLoadColumnType, 'DATE'), concat('''', activity('LU-Metadata').output.firstRow.LastExtractionTime, ''''), activity('LU-Metadata').output.firstRow.LastExtractionCounter)}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "SET-SourceSQL-Incremental",
							"description": "Update the Source SQL with the Incremental Load value",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "SET-LastExtractionVal",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "SourceSQL",
								"value": {
									"value": "@replace(activity('LU-Metadata').output.firstRow.SourceSQL, '{LASTEXTRACTION}', variables('IncrementalLoadValue'))",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "IF-IncrementalLoad",
				"description": "If the current object is Incremental Load, then get the current timestamp and counter from the Source Database",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "LU-Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@{and(activity('LU-Metadata').output.firstRow.IncrementalLoadFlag, activity('LU-Metadata').output.firstRow.ExtractionFlag)}",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SET-LastExtractionCounter-Default",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LastExtractionCounter",
								"value": "0"
							}
						},
						{
							"name": "SET-LastExtractionTime-Default",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LastExtractionTime",
								"value": {
									"value": "@utcnow()",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "LU-GetCurrentExtractionVal",
							"description": "Get the Last Extraction Values from the Source Database",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlSource",
									"sqlReaderQuery": "SELECT GETDATE() AS LastDateTime, CONVERT(VARCHAR, CONVERT(bigint, @@DBTS)) AS LastTSCounter"
								},
								"dataset": {
									"referenceName": "DSDBSourceOnPremGeneral",
									"type": "DatasetReference",
									"parameters": {
										"DBName": {
											"value": "@activity('LU-Metadata').output.firstRow.SourceDatabase\n",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "SET-LastExtractionCounter",
							"description": "Set the value for Last Extraction Counter. If Timestamp or actual column.",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "LU-GetCurrentExtractionVal",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LastExtractionCounter",
								"value": {
									"value": "@activity('LU-GetCurrentExtractionVal').output.firstRow.LastTSCounter",
									"type": "Expression"
								}
							}
						},
						{
							"name": "SET-LastExtractionTime",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "LU-GetCurrentExtractionVal",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "LastExtractionTime",
								"value": {
									"value": "@activity('LU-GetCurrentExtractionVal').output.firstRow.LastDateTime",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"SourceSystem": {
				"type": "String",
				"defaultValue": "Src-OnPrem"
			},
			"SourceSchema": {
				"type": "String",
				"defaultValue": "HumanResources"
			},
			"SourceTable": {
				"type": "String",
				"defaultValue": "Department"
			}
		},
		"variables": {
			"SourceSQL": {
				"type": "String"
			},
			"IncrementalLoadValue": {
				"type": "String"
			},
			"LastExtractionCounter": {
				"type": "String"
			},
			"LastExtractionTime": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Framework"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}